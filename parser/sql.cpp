#line 2 "sql.cpp"

#line 4 "sql.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 149
#define YY_END_OF_BUFFER 150
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[632] =
    {   0,
        0,    0,  150,  148,  147,  147,  133,  145,  118,  133,
      138,  144,  140,  141,  134,  142,  133,  143,  135,  114,
      114,  139,  130,  123,  129,  148,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  100,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  136,  121,  146,  137,  147,  133,  133,  125,
      118,  118,   89,  117,  116,  114,    0,  132,  128,  126,
      127,  131,  122,  121,  121,  121,   86,    0,    0,  121,
      121,  121,   95,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,

      121,  121,   87,   98,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,   73,   90,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,   91,  117,  117,  117,
      117,  113,  124,    8,   88,  101,   96,    0,  121,  121,
      121,   56,  121,  121,  121,  121,  121,  121,   44,  121,
      121,  121,  121,  110,  121,  121,   26,  121,  121,  121,
       77,  121,  121,  121,  121,  121,  121,  121,  121,   39,
      121,   64,  121,  121,  121,  121,  121,  121,  121,  121,

       92,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,   19,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,   72,  121,
      121,  121,  121,  121,  121,  111,  121,  121,  121,  117,
      112,  121,  121,  121,   46,   21,   27,   34,  121,  121,
      121,  121,  121,  121,   97,  121,  121,   24,  121,  121,
      121,  121,  121,   80,  121,  121,  121,  121,  121,  121,
      121,  121,   84,   65,  121,   66,   82,  121,   55,  121,
      121,  121,   99,  121,  121,  121,  121,   43,  121,  121,
      121,  121,  121,    5,  121,  121,  121,  121,  121,   47,

       23,   30,  121,  108,  121,  121,  121,  121,  121,   61,
      121,  121,  121,   22,  121,  121,  121,   62,  121,  121,
      121,  121,  121,   71,  121,  121,  121,  121,  121,  121,
      121,  121,  109,   40,   76,   93,  121,  121,  121,   63,
       69,  121,  121,  121,  104,    0,  121,  121,  121,  121,
      121,  121,   94,   67,  121,   18,  121,   68,   83,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,   79,  121,  121,  121,   74,  121,  121,
      121,  121,   81,    0,  121,  121,  121,   38,   33,  121,
      121,  121,  121,    4,  121,   42,  121,  102,  103,  121,

       75,    2,  121,   59,    0,  121,  121,  121,  121,  121,
      121,  121,   78,   45,    1,   29,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,    3,  121,  121,  121,  121,    0,  121,  121,
       20,  121,  121,   31,  106,  121,    0,  121,  121,   37,
      121,    0,  121,  121,  121,  121,  121,  121,  121,   70,
      121,  121,  121,  121,    0,  121,  121,  121,  121,  121,
      121,  121,  121,  121,   48,  121,  107,  121,  121,  121,
       36,  121,    0,  121,   59,    0,   32,    7,    0,   25,
      121,  121,  121,    0,   51,   51,  121,  121,  121,  121,

      121,  121,  121,  121,   49,  121,    0,  121,  121,  121,
      121,  121,  121,  121,  121,   48,   48,   28,   60,  121,
        0,    0,   57,  119,  121,    0,  121,  121,  121,    0,
      121,  121,  121,  121,   50,  121,  105,   49,   49,    0,
      121,  121,   14,  121,  121,  121,  121,   52,   35,    0,
      115,    0,  119,  121,    0,  121,   58,  121,    0,  121,
      121,  121,   50,   50,    0,  121,  121,  121,  121,  121,
      121,    0,    6,    0,  121,  121,    0,  121,   54,  121,
       85,  121,  121,  121,  121,  121,  121,  120,    0,  121,
      121,   53,  121,   17,  121,  121,  121,   15,  121,  121,

        0,    9,  121,   54,  121,  121,  121,  121,   10,    0,
      121,   12,  121,  121,  121,    0,  121,  121,  121,  121,
       41,  121,  121,  121,   11,   58,   13,  121,  121,   16,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,    8,   14,   15,   16,   17,   18,   19,   20,
       21,   21,   21,   21,   21,   22,   21,    1,   23,   24,
       25,   26,    1,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
        1,    1,    1,   54,   55,   56,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   82,    1,   83,    1,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[84] =
    {   0,
        1,    2,    2,    2,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    1,    4,    4,    4,
        4,    4,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    1,    7,    1,    5,    5,    5,    5,
        5,    5,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    1
    } ;

static const flex_int16_t yy_base[639] =
    {   0,
        0,    0,  494, 1350,   82,   85,   88, 1350,   91,   96,
      480, 1350, 1350, 1350, 1350, 1350,  104, 1350,  473,   96,
      102, 1350,  101, 1350,  103,    0,   91,  131,  108,  116,
      123,  156,   57,  121,  105,   98,  110,  172,  124,  169,
      161,  115,  142,  184,  225,  219,  201,  230,  239,  163,
        0,  175, 1350,  227, 1350,  402,  303,  306,  314, 1350,
      151,  218, 1350,  322, 1350,  313,    0, 1350,  355, 1350,
     1350, 1350,    0,    0,  171,  268,  211,  336,  323,  203,
      313,  217,    0,  217,  240,  284,  294,  301,  320,  309,
      303,  310,  326,  325,  323,  321,  319,  325,  326,  320,

      336,  330,  363,    0,  336,  321,  327,  345,  368,  364,
      380,  365,  366,  376,    0,  385,  370,  376,  383,  392,
      387,  386,  385,  389,  383,  393,  401,  382,  392,  387,
      401,  430,  423,  418,  431,  437,  438,  438,  427,  428,
      443,  429,  433,  434,  444,  454, 1350,  309,  510,  518,
      526,    0, 1350,    0,    0,    0,    0,  517,  437,  452,
      462,    0,  495,  500,  495,  503,  497,  512,  509,  518,
      516,  519,  503,    0,  522,  520,  508,  509,  510,  529,
      528,  519,  512,  526,  528,  522,  533,  534,  535,  558,
      527,    0,  534,  535,  566,  565,  568,  320,  567,  556,

        0,  566,  574,  575,  578,  579,  571,  580,  578,  576,
      587,  584,    0,  567,  577,  581,  580,  260,  594,  576,
      583,  593,  574,  596,  598,  607,  620,  630,    0,  618,
      280,  631,  616,  622,  629,    0,  623,  625,  621,  480,
     1350,  638,  630,  627,    0,    0,    0,    0,  645,  628,
      628,  636,  630,  632,    0,  644,  642,    0,  652,  636,
      652,  639,  666,    0,  663,  673,  245,  671,  666,  673,
      674,  686,    0,    0,  680,    0,    0,  675,  726,  680,
      676,  680,    0,  686,  687,  701,  696,    0,  685,  690,
      706,  694,  710,    0,  709,  703,  725,  747,  721,    0,

        0,  712,  743,    0,  733,  728,  746,  734,  748,  226,
      747,  754,  755,    0,  760,  792,  764,    0,  762,  767,
      753,  761,  767,    0,  779,  788,  784,  792,  784,  798,
      803,  786,    0,    0,    0,    0,  799,  791,  803,    0,
        0,  789,  805,  259,    0,  836,  802,  814,  819,  803,
      809,  822,    0,    0,  820,    0,  812,    0,    0,  805,
      811,  836,  845,  822,  835,  841,  830,  833,  848,  841,
      850,  849,  859,    0,  851,  853,  863,    0,  870,  863,
      877,  864,    0,  905,  877,  874,  875,    0,    0,  893,
      886,  888,  882,    0,  900,  934,  885,    0,    0,  887,

        0,    0,  894,  177,  912,  899,  892,  901,  911,  935,
      909,  901,    0,    0,    0,    0,  912,  911,  925,  963,
      928,  930,  944,  173,  945,  949,  957,  945,  941,  938,
      949,  962,    0,  959,  968,  952,  957,  957,  962,  206,
        0, 1002,  975,    0,    0,  961, 1018,  977,  974,    0,
     1000,  970, 1002,  986, 1011,  993, 1003, 1002, 1013,    0,
     1001, 1005, 1001,  998, 1048,  163, 1020, 1019, 1025, 1026,
     1018, 1012, 1025, 1037,    0, 1020,    0, 1037, 1032, 1034,
        0,  204, 1041, 1042,    0, 1089,    0, 1044, 1053,    0,
     1057, 1064, 1069, 1073,    0,    0, 1068, 1070, 1061, 1065,

     1064, 1061, 1081, 1085,    0, 1068, 1081, 1074, 1088, 1089,
      139, 1094, 1084,  133, 1081,    0,    0,    0,    0, 1073,
     1135, 1087,    0,    0, 1089, 1113, 1111, 1116, 1113, 1124,
     1120, 1134, 1127, 1135,    0, 1118,    0,    0,    0, 1128,
     1135, 1123,    0, 1136, 1140,   90, 1134,    0,    0, 1177,
     1350, 1124,    0, 1123, 1145, 1140,    0, 1137, 1150, 1154,
     1138, 1137,    0,    0, 1171, 1162,   83, 1167, 1175, 1169,
     1173, 1173,    0, 1181, 1171, 1191, 1175, 1176,    0, 1170,
     1350, 1175, 1179, 1177, 1194, 1195, 1192, 1350, 1183, 1178,
     1190, 1350, 1181,    0, 1195, 1203, 1195,    0, 1194, 1200,

     1206,    0,   90,    0, 1214, 1220, 1236, 1220,    0, 1230,
       50,    0, 1225,   42, 1235, 1234, 1246, 1238, 1233, 1232,
     1350, 1244, 1234, 1240,    0,    0,    0, 1233, 1238,    0,
     1350, 1313, 1318, 1322, 1329, 1333, 1337, 1342
    } ;

static const flex_int16_t yy_def[639] =
    {   0,
      631,    1,  631,  631,  631,  631,  631,  631,  632,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  633,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  631,  634,  631,  631,  631,  631,  631,  631,
      632,  631,  631,  635,  631,  631,  636,  631,  631,  631,
      631,  631,  633,  634,  634,  634,  634,  631,  631,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,

      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  631,  635,  635,  631,
      635,  636,  631,  634,  634,  634,  634,  631,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,

      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  631,
      631,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,

      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  631,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  631,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,

      634,  634,  634,  634,  631,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  631,  634,  634,
      634,  634,  634,  634,  634,  634,  631,  634,  634,  634,
      634,  631,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  631,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  631,  634,  634,  637,  634,  634,  631,  634,
      634,  634,  634,  631,  634,  634,  634,  634,  634,  634,

      634,  634,  634,  634,  634,  634,  631,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      631,  631,  634,  638,  634,  631,  634,  634,  634,  631,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  631,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  631,
      631,  631,  638,  634,  631,  634,  634,  634,  631,  634,
      634,  634,  634,  634,  631,  634,  634,  634,  634,  634,
      634,  631,  634,  631,  634,  634,  631,  634,  634,  634,
      631,  634,  634,  634,  634,  634,  634,  631,  631,  634,
      634,  631,  634,  634,  634,  634,  634,  634,  634,  634,

      631,  634,  634,  634,  634,  634,  634,  634,  634,  631,
      634,  634,  634,  634,  634,  631,  634,  634,  634,  634,
      631,  634,  634,  634,  634,  634,  634,  634,  634,  634,
        0,  631,  631,  631,  631,  631,  631,  631
    } ;

static const flex_int16_t yy_nxt[1434] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   56,   57,   57,   57,   57,   57,   57,   58,
       58,   58,   59,   62,   62,   59,  619,   58,   58,   58,

       59,   99,   59,   59,  617,   58,   58,   58,   59,  611,
       59,   59,   60,   66,   66,   66,   66,   66,   64,   66,
       66,   66,   66,   66,   68,   69,   70,   71,   72,   75,
       99,   76,   78,   78,   78,   84,   77,  583,  102,  105,
       79,  106,   85,   88,  570,  103,   67,   89,  100,   86,
      104,   90,   87,   62,   62,  111,  101,   91,   75,  118,
       76,   92,   80,   93,   84,   77,   81,  102,  105,   82,
      106,   85,   88,   94,  103,   67,   89,  100,   86,  104,
       90,   87,   83,   95,  111,  101,   91,  547,  118,  119,
       92,   80,   93,  544,   96,   81,  112,   97,   82,  107,

       98,  115,   94,  108,  143,  116,  144,  109,  117,  154,
      113,   83,   95,  110,  521,  120,  114,  508,  119,  121,
       62,   62,  122,   96,  485,  112,   97,  470,  107,   98,
      115,  451,  108,  143,  116,  144,  109,  117,  154,  113,
      157,  135,  110,  136,  120,  114,  137,  138,  121,  159,
      131,  122,  123,  132,  133,  145,  124,  139,  163,  125,
      126,  140,  164,  134,  127,  146,  128,  165,  129,  157,
      135,  130,  136,  141,  142,  137,  138,  404,  159,  131,
      379,  123,  132,  133,  145,  124,  139,  163,  125,  126,
      140,  164,  134,  127,  146,  128,  165,  129,  155,  338,

      130,  310,  141,  142,   57,   57,   57,   58,   58,   58,
       58,  240,  240,   58,  298,   58,   58,   58,   59,  156,
       58,   59,  166,  149,  150,  150,  151,  155,   59,  151,
       66,   66,   66,   66,   66,  167,  151,   78,   78,   78,
      158,  158,  158,  158,  158,   79,  160,  168,  156,  169,
      175,  166,  170,  161,  173,  176,  177,  174,  171,  162,
      178,  179,  180,  181,  167,  172,  182,  183,  184,  185,
      186,  191,  192,  193,  280,  160,  168,  194,  169,  175,
      153,  170,  161,  173,  176,  177,  174,  171,  162,  178,
      179,  180,  181,  187,  172,  182,  183,  184,  185,  186,

      191,  192,  193,  188,  197,  195,  194,  196,  189,  190,
      199,  200,  201,  198,  202,  203,  204,  205,  206,  207,
      209,  210,  187,  211,  214,  208,  215,  212,  216,  217,
      218,  219,  188,  197,  195,  213,  196,  189,  190,  199,
      200,  201,  198,  202,  203,  204,  205,  206,  207,  209,
      210,  220,  211,  214,  208,  215,  212,  216,  217,  218,
      219,  221,  222,  223,  213,  224,  225,  228,  226,  229,
      231,  232,  233,  230,  234,  235,  227,  236,  237,  238,
      220,  239,  240,  240,  147,   65,  242,  243,   63,  244,
      221,  222,  223,  631,  224,  225,  228,  226,  229,  231,

      232,  233,  230,  234,  235,  227,  236,  237,  238,  631,
      239,  149,  150,  150,  149,  242,  243,  149,  244,   58,
      150,  150,   58,  245,  149,   58,  241,  149,  150,  150,
      151,  246,   58,  151,  158,  158,  158,  158,  158,  248,
      151,  249,  250,  251,  252,  253,  247,  254,  255,  256,
      257,  258,  245,  259,  260,  261,  262,  263,  264,  265,
      246,  266,  267,  268,  269,  270,  271,  274,  248,  275,
      249,  250,  251,  252,  253,  247,  254,  255,  256,  257,
      258,  276,  259,  260,  261,  262,  263,  264,  265,  272,
      266,  267,  268,  269,  270,  271,  274,  277,  275,  273,

      278,  279,  281,  282,  283,  284,  285,  286,  287,  288,
      276,  289,  290,  291,  292,  293,  294,  295,  272,  296,
      297,  299,  300,  301,  302,  303,  277,  304,  273,  278,
      279,  281,  282,  283,  284,  285,  286,  287,  288,  305,
      289,  290,  291,  292,  293,  294,  295,  306,  296,  297,
      299,  300,  301,  302,  303,  307,  304,  308,  309,  311,
      312,  313,  314,  316,  317,  318,  315,  319,  305,  320,
      321,  322,  323,  324,  325,  326,  306,  327,  328,  329,
      330,  331,  332,  333,  307,  334,  308,  309,  311,  312,
      313,  314,  316,  317,  318,  315,  319,  335,  320,  321,

      322,  323,  324,  325,  326,  336,  327,  328,  329,  330,
      331,  332,  333,  337,  334,  339,  340,  341,  342,  343,
      344,  345,  350,  351,  352,  631,  335,  346,  346,  346,
      353,  354,  355,  356,  336,  357,  358,  359,  360,  361,
      362,  363,  337,  631,  339,  340,  341,  342,  343,  344,
      345,  350,  351,  352,  347,  364,  369,  370,  631,  353,
      354,  355,  356,  631,  357,  358,  359,  360,  361,  362,
      363,  371,  348,  374,  349,  365,  366,  375,  372,  376,
      377,  378,  380,  347,  364,  369,  370,  367,  381,  373,
      382,  383,  368,  384,  384,  384,  385,  386,  387,  388,

      371,  348,  374,  349,  365,  366,  375,  372,  376,  377,
      378,  380,  389,  390,  391,  392,  367,  381,  373,  382,
      383,  368,  393,  394,  395,  385,  386,  387,  388,  396,
      397,  398,  399,  400,  401,  402,  403,  346,  346,  346,
      406,  389,  390,  391,  392,  407,  408,  409,  410,  411,
      412,  393,  394,  395,  413,  631,  414,  415,  396,  397,
      398,  399,  400,  401,  402,  403,  416,  420,  423,  406,
      421,  424,  425,  417,  407,  408,  409,  410,  411,  412,
      418,  426,  422,  413,  405,  414,  415,  427,  428,  429,
      430,  419,  431,  432,  433,  416,  420,  423,  434,  421,

      424,  425,  417,  435,  436,  437,  384,  384,  384,  418,
      426,  422,  439,  405,  440,  441,  427,  428,  429,  430,
      419,  431,  432,  433,  442,  443,  444,  434,  445,  446,
      448,  449,  435,  436,  437,  447,  447,  447,  450,  452,
      453,  439,  454,  440,  441,  455,  456,  460,  461,  438,
      462,  463,  631,  442,  443,  444,  464,  445,  446,  448,
      449,  466,  467,  457,  465,  465,  465,  450,  452,  453,
      458,  454,  471,  468,  455,  456,  460,  461,  438,  462,
      463,  459,  469,  472,  473,  464,  474,  475,  476,  477,
      466,  467,  457,  478,  479,  480,  481,  482,  483,  458,

      484,  471,  468,  486,  486,  486,  487,  488,  490,  491,
      459,  469,  472,  473,  494,  474,  475,  476,  477,  447,
      447,  447,  478,  479,  480,  481,  482,  483,  492,  484,
      495,  631,  496,  493,  499,  487,  488,  490,  491,  497,
      498,  500,  501,  494,  502,  503,  504,  505,  506,  465,
      465,  465,  509,  510,  511,  512,  513,  492,  514,  495,
      489,  496,  493,  499,  515,  516,  517,  518,  497,  498,
      500,  501,  519,  502,  503,  504,  505,  506,  520,  522,
      523,  509,  510,  511,  512,  513,  507,  514,  525,  489,
      486,  486,  486,  515,  516,  517,  518,  526,  527,  528,

      529,  519,  530,  531,  532,  533,  534,  520,  522,  523,
      535,  536,  537,  538,  539,  507,  540,  525,  541,  542,
      543,  545,  546,  548,  549,  552,  526,  527,  528,  529,
      554,  530,  531,  532,  533,  534,  550,  550,  550,  535,
      536,  537,  538,  539,  555,  540,  551,  541,  542,  543,
      545,  546,  548,  549,  552,  556,  557,  558,  559,  554,
      560,  561,  562,  563,  564,  565,  566,  567,  568,  569,
      571,  572,  573,  555,  574,  575,  576,  577,  550,  550,
      550,  578,  579,  580,  556,  557,  558,  559,  551,  560,
      561,  562,  563,  564,  565,  566,  567,  568,  569,  571,

      572,  573,  581,  574,  575,  576,  577,  582,  584,  585,
      578,  579,  580,  586,  587,  588,  589,  590,  591,  592,
      593,  594,  595,  596,  597,  598,  599,  600,  601,  602,
      603,  581,  604,  605,  606,  607,  582,  584,  585,  608,
      609,  610,  586,  587,  588,  589,  590,  591,  592,  593,
      594,  595,  596,  597,  598,  599,  600,  601,  602,  603,
      612,  604,  605,  606,  607,  613,  614,  615,  608,  609,
      610,  616,  618,  620,  621,  622,  623,  624,  625,  626,
      627,  628,  629,  630,  631,  631,  631,  631,  631,  612,
      631,  631,  631,  631,  613,  614,  615,  631,  631,  631,

      616,  618,  620,  621,  622,  623,  624,  625,  626,  627,
      628,  629,  630,   61,   61,   61,   61,   61,   61,   61,
       73,   73,   73,   73,   74,   74,   74,   74,   74,  148,
      148,  148,  148,  148,  148,  148,  152,  152,  524,  631,
      631,  524,  524,  524,  553,  553,  553,  553,  553,    3,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,

      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631
    } ;

static const flex_int16_t yy_chk[1434] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    5,    5,    6,    6,    6,    7,
        7,    7,    7,    9,    9,    7,  614,   10,   10,   10,

       10,   33,    7,   10,  611,   17,   17,   17,   17,  603,
       10,   17,    7,   20,   20,   20,   20,   20,   17,   21,
       21,   21,   21,   21,   23,   23,   23,   25,   25,   27,
       33,   27,   28,   28,   28,   29,   27,  567,   35,   36,
       28,   37,   29,   30,  546,   35,   20,   30,   34,   29,
       35,   30,   29,   61,   61,   39,   34,   30,   27,   42,
       27,   31,   28,   31,   29,   27,   28,   35,   36,   28,
       37,   29,   30,   31,   35,   20,   30,   34,   29,   35,
       30,   29,   28,   32,   39,   34,   30,  514,   42,   43,
       31,   28,   31,  511,   32,   28,   40,   32,   28,   38,

       32,   41,   31,   38,   50,   41,   52,   38,   41,   75,
       40,   28,   32,   38,  482,   44,   40,  466,   43,   44,
       62,   62,   44,   32,  440,   40,   32,  424,   38,   32,
       41,  404,   38,   50,   41,   52,   38,   41,   75,   40,
       77,   47,   38,   47,   44,   40,   47,   47,   44,   80,
       46,   44,   45,   46,   46,   54,   45,   48,   82,   45,
       45,   48,   84,   46,   45,   54,   45,   85,   45,   77,
       47,   45,   47,   49,   49,   47,   47,  344,   80,   46,
      310,   45,   46,   46,   54,   45,   48,   82,   45,   45,
       48,   84,   46,   45,   54,   45,   85,   45,   76,  267,

       45,  231,   49,   49,   57,   57,   57,   58,   58,   58,
       58,  148,  148,   58,  218,   59,   59,   59,   59,   76,
       58,   59,   86,   64,   64,   64,   64,   76,   59,   64,
       66,   66,   66,   66,   66,   87,   64,   78,   78,   78,
       79,   79,   79,   79,   79,   78,   81,   88,   76,   89,
       91,   86,   89,   81,   90,   92,   93,   90,   89,   81,
       94,   95,   96,   97,   87,   89,   98,   99,  100,  101,
      102,  105,  106,  107,  198,   81,   88,  108,   89,   91,
       69,   89,   81,   90,   92,   93,   90,   89,   81,   94,
       95,   96,   97,  103,   89,   98,   99,  100,  101,  102,

      105,  106,  107,  103,  110,  109,  108,  109,  103,  103,
      111,  112,  113,  110,  114,  116,  117,  118,  119,  120,
      121,  122,  103,  123,  125,  120,  126,  124,  127,  128,
      129,  130,  103,  110,  109,  124,  109,  103,  103,  111,
      112,  113,  110,  114,  116,  117,  118,  119,  120,  121,
      122,  131,  123,  125,  120,  126,  124,  127,  128,  129,
      130,  132,  133,  133,  124,  134,  135,  136,  135,  137,
      138,  139,  140,  137,  141,  142,  135,  143,  144,  145,
      131,  146,  240,  240,   56,   19,  159,  160,   11,  161,
      132,  133,  133,    3,  134,  135,  136,  135,  137,  138,

      139,  140,  137,  141,  142,  135,  143,  144,  145,    0,
      146,  149,  149,  149,  149,  159,  160,  149,  161,  150,
      150,  150,  150,  163,  149,  150,  158,  151,  151,  151,
      151,  164,  150,  151,  158,  158,  158,  158,  158,  165,
      151,  166,  167,  168,  169,  170,  164,  171,  172,  173,
      175,  176,  163,  177,  178,  179,  180,  181,  182,  183,
      164,  184,  185,  186,  187,  188,  189,  191,  165,  193,
      166,  167,  168,  169,  170,  164,  171,  172,  173,  175,
      176,  194,  177,  178,  179,  180,  181,  182,  183,  190,
      184,  185,  186,  187,  188,  189,  191,  195,  193,  190,

      196,  197,  199,  200,  202,  203,  204,  205,  206,  207,
      194,  208,  209,  210,  211,  212,  214,  215,  190,  216,
      217,  219,  220,  221,  222,  223,  195,  224,  190,  196,
      197,  199,  200,  202,  203,  204,  205,  206,  207,  225,
      208,  209,  210,  211,  212,  214,  215,  226,  216,  217,
      219,  220,  221,  222,  223,  227,  224,  228,  230,  232,
      232,  233,  234,  235,  237,  238,  234,  239,  225,  242,
      243,  244,  249,  250,  251,  252,  226,  253,  254,  256,
      257,  259,  260,  261,  227,  262,  228,  230,  232,  232,
      233,  234,  235,  237,  238,  234,  239,  263,  242,  243,

      244,  249,  250,  251,  252,  265,  253,  254,  256,  257,
      259,  260,  261,  266,  262,  268,  269,  270,  271,  272,
      275,  278,  280,  281,  282,    0,  263,  279,  279,  279,
      284,  285,  286,  287,  265,  289,  290,  291,  292,  293,
      295,  296,  266,    0,  268,  269,  270,  271,  272,  275,
      278,  280,  281,  282,  279,  297,  299,  302,    0,  284,
      285,  286,  287,    0,  289,  290,  291,  292,  293,  295,
      296,  303,  279,  305,  279,  298,  298,  306,  303,  307,
      308,  309,  311,  279,  297,  299,  302,  298,  312,  303,
      313,  315,  298,  316,  316,  316,  317,  319,  320,  321,

      303,  279,  305,  279,  298,  298,  306,  303,  307,  308,
      309,  311,  322,  323,  325,  326,  298,  312,  303,  313,
      315,  298,  327,  328,  329,  317,  319,  320,  321,  330,
      331,  332,  337,  338,  339,  342,  343,  346,  346,  346,
      347,  322,  323,  325,  326,  348,  349,  350,  351,  352,
      355,  327,  328,  329,  357,    0,  360,  361,  330,  331,
      332,  337,  338,  339,  342,  343,  362,  364,  366,  347,
      365,  367,  368,  363,  348,  349,  350,  351,  352,  355,
      363,  369,  365,  357,  346,  360,  361,  370,  371,  372,
      373,  363,  375,  376,  377,  362,  364,  366,  379,  365,

      367,  368,  363,  380,  381,  382,  384,  384,  384,  363,
      369,  365,  385,  346,  386,  387,  370,  371,  372,  373,
      363,  375,  376,  377,  390,  391,  392,  379,  393,  395,
      397,  400,  380,  381,  382,  396,  396,  396,  403,  405,
      406,  385,  407,  386,  387,  408,  409,  411,  412,  384,
      417,  418,    0,  390,  391,  392,  419,  393,  395,  397,
      400,  421,  422,  410,  420,  420,  420,  403,  405,  406,
      410,  407,  425,  423,  408,  409,  411,  412,  384,  417,
      418,  410,  423,  426,  427,  419,  428,  429,  430,  431,
      421,  422,  410,  432,  434,  435,  436,  437,  438,  410,

      439,  425,  423,  442,  442,  442,  443,  446,  448,  449,
      410,  423,  426,  427,  452,  428,  429,  430,  431,  447,
      447,  447,  432,  434,  435,  436,  437,  438,  451,  439,
      453,    0,  454,  451,  456,  443,  446,  448,  449,  455,
      455,  457,  458,  452,  459,  461,  462,  463,  464,  465,
      465,  465,  467,  468,  469,  470,  471,  451,  472,  453,
      447,  454,  451,  456,  473,  474,  476,  478,  455,  455,
      457,  458,  479,  459,  461,  462,  463,  464,  480,  483,
      484,  467,  468,  469,  470,  471,  465,  472,  488,  447,
      486,  486,  486,  473,  474,  476,  478,  489,  491,  492,

      493,  479,  494,  497,  498,  499,  500,  480,  483,  484,
      501,  502,  503,  504,  506,  465,  507,  488,  508,  509,
      510,  512,  513,  515,  520,  522,  489,  491,  492,  493,
      525,  494,  497,  498,  499,  500,  521,  521,  521,  501,
      502,  503,  504,  506,  526,  507,  521,  508,  509,  510,
      512,  513,  515,  520,  522,  527,  528,  529,  530,  525,
      531,  532,  533,  534,  536,  540,  541,  542,  544,  545,
      547,  552,  554,  526,  555,  556,  558,  559,  550,  550,
      550,  560,  561,  562,  527,  528,  529,  530,  550,  531,
      532,  533,  534,  536,  540,  541,  542,  544,  545,  547,

      552,  554,  565,  555,  556,  558,  559,  566,  568,  569,
      560,  561,  562,  570,  571,  572,  574,  575,  576,  577,
      578,  580,  582,  583,  584,  585,  586,  587,  589,  590,
      591,  565,  593,  595,  596,  597,  566,  568,  569,  599,
      600,  601,  570,  571,  572,  574,  575,  576,  577,  578,
      580,  582,  583,  584,  585,  586,  587,  589,  590,  591,
      605,  593,  595,  596,  597,  606,  607,  608,  599,  600,
      601,  610,  613,  615,  616,  617,  618,  619,  620,  622,
      623,  624,  628,  629,    0,    0,    0,    0,    0,  605,
        0,    0,    0,    0,  606,  607,  608,    0,    0,    0,

      610,  613,  615,  616,  617,  618,  619,  620,  622,  623,
      624,  628,  629,  632,  632,  632,  632,  632,  632,  632,
      633,  633,  633,  633,  634,  634,  634,  634,  634,  635,
      635,  635,  635,  635,  635,  635,  636,  636,  637,    0,
        0,  637,  637,  637,  638,  638,  638,  638,  638,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,

      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "sql.lex"
#line 2 "sql.lex"
#include "sql.tab.hpp"
#include "expression.hpp"
#include "parser.hpp"
static int get_q_string(int delimeter);
int yyparse();
static YY_BUFFER_STATE buf;
#line 978 "sql.cpp"
#line 979 "sql.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 12 "sql.lex"


#line 1199 "sql.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 632 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 631 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 14 "sql.lex"
return SELECT;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 15 "sql.lex"
return INSERT;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 16 "sql.lex"
return UPDATE;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 17 "sql.lex"
return DELETE;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 18 "sql.lex"
return SHOW;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 20 "sql.lex"
return SELECT_OPT;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 21 "sql.lex"
return DISTINCT;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 22 "sql.lex"
return SELECT_OPT;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 23 "sql.lex"
return SELECT_OPT;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 24 "sql.lex"
return STRAIGHT_JOIN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 25 "sql.lex"
return SELECT_OPT;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 26 "sql.lex"
return SELECT_OPT;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 27 "sql.lex"
return SELECT_OPT;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 28 "sql.lex"
return SELECT_OPT;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 29 "sql.lex"
return SELECT_OPT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 30 "sql.lex"
return SELECT_OPT;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 32 "sql.lex"
return LOW_PRIORITY;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 33 "sql.lex"
return QUICK;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 35 "sql.lex"
return SET;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 36 "sql.lex"
return BETWEEN;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 37 "sql.lex"
return CASE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 38 "sql.lex"
return WHEN;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 39 "sql.lex"
return THEN;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 40 "sql.lex"
return ELSE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 41 "sql.lex"
return END_CASE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 42 "sql.lex"
return END_CASE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 44 "sql.lex"
return CAST;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 45 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 46 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 47 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 48 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 49 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 50 "sql.lex"
return BINARY;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 51 "sql.lex"
return CHAR_TYPE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 52 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 53 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 54 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 55 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 56 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 57 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 58 "sql.lex"
return DATA_TYPE; // mysql
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 59 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 60 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 61 "sql.lex"
return DATA_TYPE; //mysql dec - decimal
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 62 "sql.lex"
return DATA_TYPE; //mysql
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 63 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 64 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 65 "sql.lex"
return DATA_TYPE; //mysql specific
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 66 "sql.lex"
return DATA_TYPE; //mysql specific
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 67 "sql.lex"
return DATA_TYPE; //mysql specific
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 68 "sql.lex"
return DATA_TYPE; //mysql specific
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 69 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 70 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 71 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 72 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 73 "sql.lex"
return DATA_TYPE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 75 "sql.lex"
; // mysql specific
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 77 "sql.lex"
; //return ENCODING;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 78 "sql.lex"
; //return ENCODING;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 79 "sql.lex"
; //return ENCODING;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 80 "sql.lex"
; //return ENCODING;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 81 "sql.lex"
; //return ENCODING;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 83 "sql.lex"
return INDEX;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 84 "sql.lex"
return INDEX;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 86 "sql.lex"
return JOIN;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 87 "sql.lex"
return JOIN_TYPE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 88 "sql.lex"
return JOIN_TYPE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 89 "sql.lex"
return JOIN_TYPE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 90 "sql.lex"
return JOIN_TYPE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 91 "sql.lex"
return JOIN_TYPE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 92 "sql.lex"
return JOIN_TYPE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 94 "sql.lex"
return USE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 95 "sql.lex"
return ON;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 96 "sql.lex"
return USING;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 97 "sql.lex"
return IGNORE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 98 "sql.lex"
return FORCE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 99 "sql.lex"
return FOR;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 101 "sql.lex"
return REGEXP;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 103 "sql.lex"
{clb_found_union_token(); return UNION;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 104 "sql.lex"
return FROM;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 105 "sql.lex"
return WHERE;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 106 "sql.lex"
return LIKE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 107 "sql.lex"
return LIKE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 108 "sql.lex"
return INTO;
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 109 "sql.lex"
return LIKE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 111 "sql.lex"
return AS;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 112 "sql.lex"
return IN;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 114 "sql.lex"
return AND;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 115 "sql.lex"
return AND;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 116 "sql.lex"
{clb_found_or_token(); return OR;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 117 "sql.lex"
{clb_found_or_token(); return OR;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 118 "sql.lex"
return NOT;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 120 "sql.lex"
return GROUP;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 121 "sql.lex"
return ORDER;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 122 "sql.lex"
return BY;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 123 "sql.lex"
return ASC;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 124 "sql.lex"
return DESC;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 126 "sql.lex"
return IS;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 127 "sql.lex"
return NULLX;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 128 "sql.lex"
return NULLX;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 130 "sql.lex"
return ANY;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 131 "sql.lex"
return EXISTS;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 133 "sql.lex"
return HAVING;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 134 "sql.lex"
return LIMIT;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 135 "sql.lex"
return PROCEDURE;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 137 "sql.lex"
return DEFAULT;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 138 "sql.lex"
return UNKNOWN;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 139 "sql.lex"
return TRUEX;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 140 "sql.lex"
return FALSEX;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 142 "sql.lex"
return DIVIDE;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 143 "sql.lex"
return XOR;
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 145 "sql.lex"
{ yylval.int_val = 3; return INTEGER; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 146 "sql.lex"
{  yylval.int_val = 3; return INTEGER; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 148 "sql.lex"
{  yylval.int_val = atoi(yytext);
               return INTEGER;
	    }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 152 "sql.lex"
{
              yylval.str_val = new SQLString("version()");
              return STRING;
            }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 157 "sql.lex"
{
              clb_found_comment();
              // using classic flex example for handling comment
              register int c;
              for ( ;1; )
              {
                while ( (c = yyinput()) != '*' && c!= EOF )
                  ;
                if (c == '*')
                {
                  while ( (c=yyinput()) == '*' )
                    ;
                  if ( c == '/' )
                    break;
                } 
                if (c == EOF)
                {
                  // fix of some strange bug that make application to hang
                  buf->yy_buffer_status = YY_BUFFER_EOF_PENDING;
                  break;
                }
              }
            }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 181 "sql.lex"
{ clb_found_comment(); }
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 183 "sql.lex"
{ clb_found_comment(); }
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 185 "sql.lex"
; //ignore COLLATE language statement
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 186 "sql.lex"
; // group by modifier
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 188 "sql.lex"
{
               yylval.str_val = new SQLString(yytext);
	       return STRING;
            }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 194 "sql.lex"
{
               yylval.int_val = strlen(yytext);
	       return VARIABLE;
	    }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 199 "sql.lex"
return EQUAL;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 200 "sql.lex"
return EQUAL;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 201 "sql.lex"
return N_EQUAL;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 202 "sql.lex"
return N_EQUAL;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 203 "sql.lex"
return N_EQUAL;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 204 "sql.lex"
return N_EQUAL;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 205 "sql.lex"
return N_EQUAL;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 206 "sql.lex"
return N_EQUAL;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 207 "sql.lex"
return SHIFT;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 208 "sql.lex"
return SHIFT;
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 210 "sql.lex"
return BASIC_OP;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 212 "sql.lex"
return MULTIPLY;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 213 "sql.lex"
return DIVIDE;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 214 "sql.lex"
return POWER;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 215 "sql.lex"
return BIT_OR;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 216 "sql.lex"
return BIT_AND;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 218 "sql.lex"
{
               /* calculate number of bytes read so far */
               int pos = (int)(yy_c_buf_p - buf->yy_ch_buf);
               /* check that ';' is not in the end of the buffer */
               if (pos < ( buf->yy_n_chars - 1))
               {
                 clb_found_query_separator();
               }
               return END;
             }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 229 "sql.lex"
return O_BRACE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 230 "sql.lex"
return C_BRACE;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 231 "sql.lex"
return COMMA;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 232 "sql.lex"
return DOT;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 234 "sql.lex"
return get_q_string('\'');
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 235 "sql.lex"
return get_q_string('\"');
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 236 "sql.lex"
return get_q_string('`');
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 238 "sql.lex"
; // return END;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 240 "sql.lex"
{ /* printf("invalid charachter %s\n", yytext); */ }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 242 "sql.lex"
ECHO;
	YY_BREAK
#line 2050 "sql.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 632 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 632 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 631);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 242 "sql.lex"

//<<EOF>>      return END;


static int get_q_string(int delimeter)
{
    //printf("looking for end of string\n");
    std::string str;
    int quoted = 0;
    int c;
    int n;

    while ( (c = yyinput()) != EOF)
    {
        if (c == delimeter && quoted == 0)
        {
            // handle the following queries:
            // SELECT 'start''end'
            if (delimeter == '\'' || delimeter == '"')
            {
              n = yyinput();
              if (n == delimeter)
              {
                // continue as is
                str.append( 1, (unsigned char) c );
                continue; 
              } else if (n == EOF)
              {
                buf->yy_buffer_status = YY_BUFFER_EOF_PENDING;

                yylval.str_val = new SQLString(str);
                if (delimeter == '\'')
                  return Q_STRING;
                return DQ_STRING;
              }
              // else return back next char
              yyunput(n, buf->yy_ch_buf );
            }
            
            yylval.str_val = new SQLString(str);
            if (delimeter == '\'')
                return Q_STRING;
            else if (delimeter == '\"')
                return DQ_STRING;
            else
                return NAME;
        }
        // add new char
        str.append( 1, (unsigned char) c );
        if (c == '\\' && quoted == 0)
        {
            quoted = 1;
        } else
        {
            quoted = 0;
        }
    }
    //yyunput(EOF, buf->yy_ch_buf );
    // fix of some strange bug that make application to hang
    buf->yy_buffer_status = YY_BUFFER_EOF_PENDING;

    yylval.str_val = new SQLString(str);
    if (delimeter == '\'')
        return Q_STRING;
    else if (delimeter == '\"')
        return DQ_STRING;
    return NAME;
}

// when end of buffer is reached, stop processing
int yywrap()
{
    return 1;
}


int scan_buffer(const char * data)
{
    //printf("scanning %s\n", data);
    //YY_BUFFER_STATE buf;
    buf = yy_scan_string(data);
    yyparse();
    yy_delete_buffer(buf);
    return 1;
}

